diff --git a/node_modules/@safe-global/protocol-kit/dist/src/Safe.d.ts b/node_modules/@safe-global/protocol-kit/dist/src/Safe.d.ts
index 69818cf..c467668 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/Safe.d.ts
+++ b/node_modules/@safe-global/protocol-kit/dist/src/Safe.d.ts
@@ -368,7 +368,7 @@ declare class Safe {
      * @throws "There are X signatures missing"
      * @throws "Cannot specify gas and gasLimit together in transaction options"
      */
-    executeTransaction(safeTransaction: SafeTransaction | SafeMultisigTransactionResponse, options?: TransactionOptions): Promise<TransactionResult>;
+    executeTransaction(safeTransaction: SafeTransaction | SafeMultisigTransactionResponse, options?: TransactionOptions, chain?: unknown): Promise<TransactionResult>;
     /**
      * Returns the Safe Transaction encoded
      *
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/Safe.js b/node_modules/@safe-global/protocol-kit/dist/src/Safe.js
index 3ebf909..e973b15 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/Safe.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/Safe.js
@@ -981,7 +981,7 @@ class Safe {
      * @throws "There are X signatures missing"
      * @throws "Cannot specify gas and gasLimit together in transaction options"
      */
-    async executeTransaction(safeTransaction, options) {
+    async executeTransaction(safeTransaction, options, chain) {
         if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
             throw new Error('Safe is not deployed');
         }
@@ -1016,7 +1016,7 @@ class Safe {
         const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.execTransaction(signedSafeTransaction, {
             from: signerAddress,
             ...options
-        });
+        }, chain);
         return txResponse;
     }
     /**
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/contracts/BaseContract.js b/node_modules/@safe-global/protocol-kit/dist/src/contracts/BaseContract.js
index cf9e599..96eaea4 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/contracts/BaseContract.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/contracts/BaseContract.js
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const ethers_1 = require("ethers");
+const { BrowserProvider, Provider: ZKProvider, Contract: ZKContract, Signer, utils } = require('zksync-ethers')
 const config_1 = require("../contracts/config");
 /**
  * Abstract class BaseContract
@@ -59,7 +60,7 @@ class BaseContract {
         this.safeProvider = safeProvider;
     }
     async init() {
-        this.contract = new ethers_1.Contract(this.contractAddress, this.contractAbi, (await this.safeProvider.getExternalSigner()) || this.runner);
+        this.contract = new ZKContract(this.contractAddress, this.contractAbi, (await this.safeProvider.getExternalSigner()) || this.runner);
     }
 }
 exports.default = BaseContract;
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.d.ts b/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.d.ts
index e5d8633..789300f 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.d.ts
+++ b/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.d.ts
@@ -116,7 +116,7 @@ declare class SafeContract_v1_3_0 extends SafeBaseContract<SafeContract_v1_3_0_A
      * @param options - Transaction options.
      * @returns Transaction result.
      */
-    execTransaction(safeTransaction: SafeTransaction, options?: TransactionOptions): Promise<TransactionResult>;
+    execTransaction(safeTransaction: SafeTransaction, options?: TransactionOptions, chain?: unknown): Promise<TransactionResult>;
     /**
      * Returns array of first 10 modules.
      * @returns Array[modules]
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.js b/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.js
index 87423b0..361aa78 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/contracts/Safe/v1.3.0/SafeContract_v1_3_0.js
@@ -7,6 +7,7 @@ const SafeBaseContract_1 = __importDefault(require("../../../contracts/Safe/Safe
 const utils_1 = require("../../../contracts/utils");
 const constants_1 = require("../../../utils/constants");
 const safe_core_sdk_types_1 = require("@safe-global/safe-core-sdk-types");
+const { BrowserProvider, Provider: ZKProvider, Signer, utils } = require('zksync-ethers')
 /**
  * SafeContract_v1_3_0  is the implementation specific to the Safe contract version 1.3.0.
  *
@@ -179,22 +180,64 @@ class SafeContract_v1_3_0 extends SafeBaseContract_1.default {
      * @param options - Transaction options.
      * @returns Transaction result.
      */
-    async execTransaction(safeTransaction, options) {
-        const gasLimit = options?.gasLimit ||
-            (await this.estimateGas('execTransaction', [
-                safeTransaction.data.to,
-                BigInt(safeTransaction.data.value),
-                safeTransaction.data.data,
-                safeTransaction.data.operation,
-                BigInt(safeTransaction.data.safeTxGas),
-                BigInt(safeTransaction.data.baseGas),
-                BigInt(safeTransaction.data.gasPrice),
-                safeTransaction.data.gasToken,
-                safeTransaction.data.refundReceiver,
-                safeTransaction.encodedSignatures()
-            ], options));
-        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), { ...options, gasLimit });
-        return (0, utils_1.toTxResult)(txResponse, options);
+    async execTransaction(safeTransaction, options, chain) {
+        const PAYMASTER_ADDRESSES = {
+            "531050104": '0x950e3Bb8C6bab20b56a70550EC037E22032A413e',
+          }
+        const paymasterParams = utils.getPaymasterParams(
+            PAYMASTER_ADDRESSES[chain.chainId], // Paymaster address
+            {
+              type: 'General',
+              innerInput: new Uint8Array(),
+            },
+          )
+        const calldata = this.contract.interface.encodeFunctionData('execTransaction', [
+            safeTransaction.data.to,
+            safeTransaction.data.value,
+            safeTransaction.data.data,
+            safeTransaction.data.operation,
+            safeTransaction.data.safeTxGas,
+            safeTransaction.data.baseGas,
+            safeTransaction.data.gasPrice,
+            safeTransaction.data.gasToken,
+            safeTransaction.data.refundReceiver,
+            safeTransaction.encodedSignatures()
+        ]);
+        const browserProvider = new BrowserProvider(this.safeProvider.provider)
+        const signer = Signer.from(
+          await browserProvider.getSigner(),
+          Number(chain.chainId),
+          new ZKProvider(chain.rpcUri.value, { name: chain.chainName, chainId: Number(chain.chainId) }),
+        )
+        const tx = await signer.sendTransaction({
+          type: utils.EIP712_TX_TYPE,
+          from: options.from,
+          to: safeTransaction.data.to,
+          data: calldata,
+          customData: {
+            gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,
+            paymasterParams,
+          },
+        })
+        return tx
+        // const gasLimit = options?.gasLimit ||
+        //     (await this.estimateGas('execTransaction', [
+        //         safeTransaction.data.to,
+        //         BigInt(safeTransaction.data.value),
+        //         safeTransaction.data.data,
+        //         safeTransaction.data.operation,
+        //         BigInt(safeTransaction.data.safeTxGas),
+        //         BigInt(safeTransaction.data.baseGas),
+        //         BigInt(safeTransaction.data.gasPrice),
+        //         safeTransaction.data.gasToken,
+        //         safeTransaction.data.refundReceiver,
+        //         safeTransaction.encodedSignatures()
+        //     ], options));
+        // const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), { ...options, gasLimit, customData: {
+        //     gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,
+        //     paymasterParams,
+        // }});
+        // return (0, utils_1.toTxResult)(txResponse, options);
     }
     /**
      * Returns array of first 10 modules.
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_v1_3_0.js b/node_modules/@safe-global/protocol-kit/dist/src/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_v1_3_0.js
index 1780dad..6e2ad19 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_v1_3_0.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_v1_3_0.js
@@ -5,6 +5,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 const SafeProxyFactoryBaseContract_1 = __importDefault(require("../../../contracts/SafeProxyFactory/SafeProxyFactoryBaseContract"));
 const safe_core_sdk_types_1 = require("@safe-global/safe-core-sdk-types");
+const { utils } = require('zksync-ethers');
 /**
  * SafeProxyFactoryContract_v1_3_0  is the implementation specific to the Safe Proxy Factory contract version 1.3.0.
  *
@@ -86,22 +87,48 @@ class SafeProxyFactoryContract_v1_3_0 extends SafeProxyFactoryBaseContract_1.def
         if (options && !options.gasLimit) {
             options.gasLimit = (await this.estimateGas('createProxyWithNonce', [safeSingletonAddress, initializer, saltNonceBigInt], { ...options })).toString();
         }
-        const proxyAddress = this.contract
-            .createProxyWithNonce(safeSingletonAddress, initializer, saltNonce, { ...options })
-            .then(async (txResponse) => {
-            if (callback) {
-                callback(txResponse.hash);
-            }
-            const txReceipt = await txResponse.wait();
-            const events = txReceipt?.logs;
-            const proxyCreationEvent = events.find((event) => event?.eventName === 'ProxyCreation');
-            if (!proxyCreationEvent || !proxyCreationEvent.args) {
-                throw new Error('SafeProxy was not deployed correctly');
-            }
-            const proxyAddress = proxyCreationEvent.args[0];
-            return proxyAddress;
-        });
+        const txData = this.contract.interface.encodeFunctionData('createProxyWithNonce', [safeSingletonAddress, initializer, saltNonce]);
+        const paymasterParams = utils.getPaymasterParams(
+            '0x950e3Bb8C6bab20b56a70550EC037E22032A413e', // Paymaster address
+            {
+                type: 'General',
+                innerInput: new Uint8Array(),
+            },
+        );
+        const signedTx = await safeProvider.signTransaction({ to: this.contract.address, data: txData, ...options,
+            customData: {
+                gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,
+                paymasterParams,
+            }, });
+        const txResponse = await safeProvider.sendTransaction(signedTx);
+        
+        if (callback) {
+            callback(txResponse.hash);
+        }
+        const txReceipt = await txResponse.wait();
+        const events = txReceipt?.logs;
+        const proxyCreationEvent = events.find((event) => event?.eventName === 'ProxyCreation');
+        if (!proxyCreationEvent || !proxyCreationEvent.args) {
+            throw new Error('SafeProxy was not deployed correctly');
+        }
+        const proxyAddress = proxyCreationEvent.args[0];
         return proxyAddress;
+        // const proxyAddress = this.contract
+        //     .createProxyWithNonce(safeSingletonAddress, initializer, saltNonce, { ...options })
+        //     .then(async (txResponse) => {
+        //     if (callback) {
+        //         callback(txResponse.hash);
+        //     }
+        //     const txReceipt = await txResponse.wait();
+        //     const events = txReceipt?.logs;
+        //     const proxyCreationEvent = events.find((event) => event?.eventName === 'ProxyCreation');
+        //     if (!proxyCreationEvent || !proxyCreationEvent.args) {
+        //         throw new Error('SafeProxy was not deployed correctly');
+        //     }
+        //     const proxyAddress = proxyCreationEvent.args[0];
+        //     return proxyAddress;
+        // });
+        // return proxyAddress;
     }
 }
 exports.default = SafeProxyFactoryContract_v1_3_0;
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js b/node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js
index 8d5c5a6..da3c04f 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js
@@ -16,6 +16,7 @@ const safeDeploymentContracts_1 = require("../contracts/safeDeploymentContracts"
 exports.PREDETERMINED_SALT_NONCE = '0xb1073742015cbcf5a3a4d9d1ae33ecf619439710b89475f92e2abd2117e90f90';
 const ZKSYNC_MAINNET = 324n;
 const ZKSYNC_TESTNET = 280n;
+const SOPHON_TESTNET = 531050104n;
 // For bundle size efficiency we store SafeProxy.sol/GnosisSafeProxy.sol zksync bytecode hash in hex.
 // To get the values below we need to:
 // 1. Compile Safe smart contracts for zksync
@@ -165,7 +166,7 @@ async function predictSafeAddress({ safeProvider, chainId, safeAccountConfig, sa
     const input = safeProvider.encodeParameters(['address'], [await safeContract.getAddress()]);
     const from = await safeProxyFactoryContract.getAddress();
     // On the zkSync Era chain, the counterfactual deployment address is calculated differently
-    const isZkSyncEraChain = [ZKSYNC_MAINNET, ZKSYNC_TESTNET].includes(chainId);
+    const isZkSyncEraChain = [ZKSYNC_MAINNET, ZKSYNC_TESTNET, SOPHON_TESTNET].includes(chainId);
     if (isZkSyncEraChain) {
         const proxyAddress = zkSyncEraCreate2Address(from, safeVersion, salt, input);
         return safeProvider.getChecksummedAddress(proxyAddress);
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js b/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
index 3194b47..6879a71 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
@@ -234,6 +234,7 @@ exports.networks = [
     { chainId: 94204209n, shortName: 'polygon-blackberry' },
     { chainId: 111557560n, shortName: 'cysep' },
     { chainId: 123420111n, shortName: 'opcelestia-raspberry' },
+    { chainId: 531050104, shortName: 'sophon-testnet' },
     { chainId: 161221135n, shortName: 'plume-testnet' },
     { chainId: 168587773n, shortName: 'blastsepolia' },
     { chainId: 222000222n, shortName: 'kanazawa' },
